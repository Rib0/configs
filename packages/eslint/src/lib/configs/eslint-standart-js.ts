import js from '@eslint/js';
import { ConfigWithExtendsArray } from '@/types/eslint';

export const eslintConfigStandartJs: ConfigWithExtendsArray = {
    name: 'rib0/eslint-config/standart-js',
    plugins: { js },
    extends: ['js/recommended'],
    rules: {
        'array-callback-return': ['error', { checkForEach: true }],
        'no-await-in-loop': 'error',
        'no-constructor-return': 'error',
        'no-duplicate-imports': ['error', { includeExports: true }],
        'no-inner-declarations': 'error',
        'no-fallthrough': ['error', { allowEmptyCase: true, reportUnusedFallthroughComment: true }],
        'no-promise-executor-return': 'error',
        'no-self-compare': 'error',
        'no-template-curly-in-string': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unreachable-loop': 'error',
        'no-unsafe-negation': ['error', { enforceForOrderingRelations: true }],
        'no-unsafe-optional-chaining': ['error', { disallowArithmeticOperators: true }],
        'no-unused-vars': [
            'error',
            { destructuredArrayIgnorePattern: '^_', ignoreRestSiblings: true },
        ],
        // 'no-use-before-define': 'error',
        'no-useless-assignment': 'error',
        'require-atomic-updates': 'error',
        'valid-typeof': ['error', { requireStringLiterals: true }],
        'accessor-pairs': ['error', { enforceForClassMembers: true }],
        'arrow-body-style': 'error',
        // 'block-scoped-var': 'error',
        camelcase: 'error',
        'capitalized-comments': [
            'error',
            'always',
            {
                line: {
                    ignoreConsecutiveComments: true,
                },
                block: {
                    ignoreInlineComments: true,
                    ignoreConsecutiveComments: true,
                },
            },
        ],
        'class-methods-use-this': 'error',
        complexity: 'error',
        'consistent-return': 'error',
        // 'consistent-this': 'error',
        curly: 'error',
        'default-case': 'error',
        'default-case-last': 'error',
        'default-param-last': 'error',
        'dot-notation': 'error',
        eqeqeq: 'error',
        'func-name-matching': ['error', 'always'],
        // 'func-names': 'error',
        'func-style': ['error', 'expression'],
        'grouped-accessor-pairs': 'error',
        // 'guard-for-in': 'error',
        // 'id-denylist': [],
        // 'id-length': 'error',
        // 'id-match': 'error'
        // 'init-declarations': 'error',
        'logical-assignment-operators': 'error',
        'max-classes-per-file': ['error', { ignoreExpressions: true }],
        'max-depth': 'error',
        'max-lines': ['error', { max: 300, skipBlankLines: true }],
        'max-lines-per-function': 'error',
        'max-nested-callbacks': 'error',
        'max-params': 'error',
        'max-statements': 'error',
        'new-cap': 'error',
        'no-alert': 'error',
        'no-array-constructor': 'error',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-console': 'error', // NOTE: disable for nodejs ENV
        'no-continue': 'error',
        'no-div-regex': 'error',
        'no-else-return': 'error',
        'no-empty-function': 'error',
        // 'no-eq-null': 'error', NOTE: disabled due to eqeqeq rulee
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'error',
        'no-extra-boolean-cast': ['error', { enforceForInnerExpressions: true }],
        'no-implicit-coercion': ['error', { disallowTemplateShorthand: true }],
        // 'no-implicit-globals: 'off'
        'no-implied-eval': 'error',
        'no-inline-comments': ['error', { ignorePattern: 'webpackChunkName:\\s.+' }],
        'no-invalid-this': 'error',
        'no-iterator': 'error',
        'no-labels': 'error',
        'no-lone-blocks': 'error',
        'no-lonely-if': 'error',
        'no-loop-func': 'error',
        'no-magic-numbers': ['error', { ignore: [1], ignoreClassFieldInitialValues: true }],
        'no-multi-assign': 'error',
        'no-multi-str': 'error',
        'no-negated-condition': 'error',
        'no-nested-ternary': 'error',
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-object-constructor': 'error',
        'no-octal-escape': 'error',
        'no-param-reassign': ['error', { props: true }],
        'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
        'no-proto': 'error',
        'no-restricted-exports': [
            'error',
            {
                restrictDefaultExports: {
                    direct: true,
                    named: true,
                    defaultFrom: true,
                    namedFrom: true,
                    namespaceFrom: true,
                },
            },
        ],
        'no-restricted-imports': [
            'error',
            {
                paths: [
                    {
                        name: 'moment',
                        message: "Please use 'date-fns' instead",
                    },
                    {
                        name: 'lodash',
                        message:
                            'Import specific parts of "lodash" explicitly, for example: `import isEqual from "lodash/isEqual"`. This will help ensure greater consistency in builds and make it easier to align versions across projects',
                    },
                ],
                patterns: [
                    {
                        group: ['lodash.*'],
                        message:
                            'Import specific parts of "lodash" explicitly, for example: `import isEqual from "lodash/isEqual"`. This will help ensure greater consistency in builds and make it easier to align versions across projects',
                    },
                ],
            },
        ],
        'no-restricted-properties': [
            'error',
            {
                object: 'it',
                property: 'only',
                message: "Did you forget to remove 'only' from this test?",
            },
            {
                object: 'describe',
                property: 'only',
                message: "Did you forget to remove 'only' from this test?",
            },
            {
                object: 'context',
                property: 'only',
                message: "Did you forget to remove 'only' from this test?",
            },
            {
                object: 'test',
                property: 'only',
                message: "Did you forget to remove 'only' from this test?",
            },
        ],
        'no-restricted-syntax': [
            // TODO: мб добавить что-то еще
            'error',
            {
                selector: 'FunctionExpression',
                message: 'Function expressions are not allowed.',
            },
            {
                selector: "CallExpression[callee.name='setTimeout'][arguments.length!=2]",
                message: 'setTimeout must always be invoked with two arguments.',
            },
        ],
        'no-return-assign': ['error', 'always'],
        'no-script-url': 'error',
        'no-sequences': ['error', { allowInParentheses: false }],
        'no-shadow': [
            'off',
            { builtinGlobals: true, hoist: 'functions', allow: [], ignoreOnInitialization: false },
        ],
        // 'no-ternary': 'error'
        'no-throw-literal': 'error',
        'no-undef-init': 'error',
        'no-undefined': 'error',
        'no-underscore-dangle': 'error',
        'no-unneeded-ternary': ['error', { defaultAssignment: false }],
        'no-unused-expressions': 'error',
        'no-useless-call': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-concat': 'error',
        'no-useless-constructor': 'error',
        'no-useless-rename': 'error',
        'no-useless-return': 'error',
        'no-var': 'error',
        'no-void': 'error',
        'object-shorthand': [
            'error',
            'always',
            {
                avoidExplicitReturnArrows: true,
            },
        ],
        'operator-assignment': ['error', 'always'],
        'prefer-arrow-callback': 'error',
        'prefer-const': ['error', { ignoreReadBeforeAssign: true }],
        'prefer-destructuring': [
            'error',
            { array: true, object: true },
            {
                enforceForRenamedProperties: true,
            },
        ],
        'prefer-exponentiation-operator': 'error',
        'prefer-numeric-literals': 'error',
        'prefer-object-has-own': 'error',
        'prefer-object-spread': 'error',
        'prefer-promise-reject-errors': ['error', { allowEmptyReject: true }],
        'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        radix: 'error',
        'require-await': 'error',
        // 'strict': 'error' NOTE: мб нужно для commonJS модулей в nodeJS
        'symbol-description': 'error',
        yoda: 'error',
    },
};
